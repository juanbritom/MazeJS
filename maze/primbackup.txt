//current.highlight();
if(first){
  stack.push(current); //inCell
  frontiers = current.returnAllNeighbors();
  if (frontiers!==undefined){
    for (var k = 0; k<frontiers.length; k++) {
      frontiers[k].partOffrontier = true;
      frontier.push(frontiers[k]);
    }
  }
  first = false;
}
if(frontier.length>0) {
  var indiceRfc = floor(random(0,frontier.length));
  current = frontier[indiceRfc];  //random da frontier
  current.visited = true;
  stack.push(current);
  var inCellEscolhida = current.randomInCell();
  if (inCellEscolhida!==undefined){
    frontiers = current.returnAllNeighbors();
    if (frontiers!==undefined) {
      for (var t = 0; t<frontiers.length; t++) {
        frontiers[t].partOffrontier = true;
        frontier.push(frontiers[t]);
      }
    }
    removeWalls(current,inCellEscolhida);
    frontier[indiceRfc].partOffrontier = false;
    frontier.splice(indiceRfc, 1);
  }
}
